import { expect } from "chai";
import irr from "../dist/irr.js";

describe("irr function", () => {
  it("matches Excel to 8 decimal places)", () => {
    expect(irr([-1500, 500, 500, 500, 500])).to.be.closeTo(
      0.125898324962364,
      8
    );
    expect(
      irr([
        -33107, 8986, 2936, 8510, 6541, 9588, 5012, 7560, 2089, 6196, 2123,
        4444, 3991, 4519, 5886, 5593, 7519,
      ])
    ).to.be.closeTo(0.174949394095163, 8);
    expect(
      irr(
        [
          -59984, 5868, 9728, 7261, 2716, 1010, 8531, 3481, 8906, 7035, 1800,
          2436, 6143, 9844, 1200, 1528, 848,
        ],
        0.05
      )
    ).to.be.closeTo(0.0390501326231925, 8);
    expect(
      irr([
        -2094, 4828, 4436, 5411, 3812, 3078, 8445, 1216, 5862, 719, 5185, 7802,
        7651, 7502, 2870, 9444, 8830,
      ])
    ).to.be.closeTo(2.27149646972146, 8);
    expect(
      irr([
        -5789, 9656, 3552, 3145, 937, 7895, 5289, 5401, 2628, 9250, 6217, 8547,
        1174, 5184, 7134, 1878, 7788,
      ])
    ).to.be.closeTo(1.17578739731306, 8);
    expect(
      irr([
        -26123, 7904, 5590, 5135, 7734, 4108, 5758, 1641, 9560, 8408, 3171,
        1791, 2781, 4965, 1301, 7841, 4834,
      ])
    ).to.be.closeTo(0.213513834602972, 8);
    expect(
      irr([
        -72516, 9380, 9904, 1621, 4865, 1719, 2035, 8052, 1121, 8063, 7801,
        3823, 6174, 6697, 7225, 7975, 4764,
      ])
    ).to.be.closeTo(0.0279382507851853, 8);
    expect(
      irr([
        -83724, 5125, 6116, 2577, 6148, 7739, 4596, 1772, 1545, 1480, 5479,
        3590, 7531, 5976, 4674, 1521, 4606,
      ])
    ).to.be.closeTo(-0.0202144906431229, 8);
    expect(
      irr([
        -55668, 6876, 4931, 981, 6336, 5573, 7523, 3393, 7586, 1683, 3696, 8538,
        2634, 574, 7984, 4432, 8637,
      ])
    ).to.be.closeTo(0.0479325401941348, 8);
    expect(
      irr([
        -74831, 927, 4511, 2939, 3174, 7813, 1572, 1904, 4086, 4279, 7258, 1287,
        2163, 840, 6923, 1867, 5739,
      ])
    ).to.be.closeTo(-0.0288900855917343, 8);
    expect(
      irr([
        -40159, 7094, 6911, 5052, 7119, 2838, 9047, 5306, 7665, 9261, 9873,
        6337, 9909, 8706, 4022, 1978, 7282,
      ])
    ).to.be.closeTo(0.148744957095722, 8);
    expect(
      irr(
        [
          -30711, 7762, 9208, 3458, 6544, 8360, 2014, 9252, 9159, 3116, 4694,
          6756, 7420, 6383, 9220, 1893, 2819,
        ],
        0.5
      )
    ).to.be.closeTo(0.206165689676401, 8);
    expect(
      irr([
        -36465, 3758, 9977, 7305, 9275, 6493, 9595, 6278, 2511, 5591, 9496,
        3402, 7329, 3097, 9056, 7019, 1846,
      ])
    ).to.be.closeTo(0.17204074176352, 8);
    expect(
      irr([
        -25434, 4805, 6728, 9032, 3621, 6509, 4373, 838, 7753, 2428, 8229, 2324,
        3578, 2343, 7826, 2153, 1617,
      ])
    ).to.be.closeTo(0.198979236464614, 8);
    expect(
      irr([
        -45734, 4535, 5959, 8212, 6114, 4171, 1645, 6077, 2590, 6887, 8295,
        2422, 6499, 9147, 5000, 3768, 6926,
      ])
    ).to.be.closeTo(0.0886425476261148, 8);
    expect(
      irr([
        -5241, 4925, 3210, 5904, 6971, 5939, 9726, 945, 7138, 4817, 4691, 1074,
        2154, 1575,
      ])
    ).to.be.closeTo(0.925705228912066, 8);
    expect(
      irr([
        -34517, 5232, 7785, 9682, 670, 9071, 639, 1354, 1949, 2623, 3097, 7562,
        5060, 1183, 598, 2646, 746,
      ])
    ).to.be.closeTo(0.0991588069021043, 8);
    expect(
      irr([
        -45383, 1775, 3229, 9552, 3067, 1259, 633, 796, 8691, 6701, 4541, 1683,
        9364, 9939, 2761, 3482, 5121,
      ])
    ).to.be.closeTo(0.0552661856611101, 8);
    expect(
      irr([
        -2233, 6352, 7961, 2860, 9952, 5798, 2701, 8352, 5951, 942, 1658, 574,
        9559, 6403, 2154, 4808, 887,
      ])
    ).to.be.closeTo(2.92368270599859, 8);
    expect(
      irr([
        -46108, 7163, 6445, 1631, 5960, 6891, 6127, 8837, 6475, 7794, 2759,
        4633, 9782, 6336, 5580, 4590, 1087,
      ])
    ).to.be.closeTo(0.100257219308823, 8);
    expect(
      irr([
        -16279, 1707, 9252, 3029, 3030, 1905, 4803, 5707, 7037, 8137, 7767,
        6952, 6128, 1893, 5338, 506, 9773,
      ])
    ).to.be.closeTo(0.274581861458764, 8);
    expect(
      irr([
        -75893, 8486, 4987, 8356, 4044, 2839, 4439, 9814, 5044, 1270, 5113,
        2363, 5469, 6118, 8503, 3738, 6099,
      ])
    ).to.be.closeTo(0.0166227722156151, 8);
    expect(
      irr([
        -76413, 9855, 8070, 7819, 7035, 1831, 5508, 1479, 6341, 6680, 7132,
        8525, 4073, 996, 9694, 7217, 2978,
      ])
    ).to.be.closeTo(0.0292325706451413, 8);
    expect(
      irr(
        [
          -28130, 7264, 6416, 4403, 827, 9231, 4841, 9077, 9912, 6973, 7731,
          9724, 814, 3049, 8216, 8692, 4308,
        ],
        0.033
      )
    ).to.be.closeTo(0.20986347169394, 8);
    expect(
      irr(
        [
          -26246, 4771, 6822, 5439, 4194, 2274, 1990, 9654, 5836, 4174, 7480,
          5455, 3780, 1213, 5560, 6238, 8477,
        ],
        0.033
      )
    ).to.be.closeTo(0.180559314435042, 8);
    expect(
      irr([
        -6773, 6251, 3621, 9558, 4547, 7370, 3220, 6906, 5979, 2874, 9340, 1264,
        6157, 7583, 5801, 8085, 1957,
      ])
    ).to.be.closeTo(0.869923016519797, 8);
    expect(
      irr([
        -66983, 5459, 3397, 1824, 2292, 1921, 521, 4134, 3574, 9389, 6214, 6023,
        1965, 7684, 905, 5271, 2807,
      ])
    ).to.be.closeTo(-0.00608790509782009, 8);
    expect(
      irr([
        -5589, 3884, 3832, 2326, 7884, 1912, 641, 3887, 8167, 8929, 4345, 9278,
        3384,
      ])
    ).to.be.closeTo(0.69291851170448, 8);
    expect(
      irr([
        -39617, 8964, 3815, 9398, 2979, 3117, 1485, 9179, 7588, 3782, 4304,
        9322, 9714, 9469, 5960, 3338, 6756,
      ])
    ).to.be.closeTo(0.132345712731346, 8);
    expect(
      irr([
        -87578, 9165, 1995, 908, 2242, 1282, 6109, 1696, 4127, 6193, 545, 5189,
        1296, 9274, 5510, 2254, 6951,
      ])
    ).to.be.closeTo(-0.0313432361716035, 8);
    expect(
      irr([
        -89996, 4678, 3836, 8429, 3931, 4859, 4692, 2404, 4211, 2471, 7551,
        7053, 7443, 8142, 9409, 8080, 4606,
      ])
    ).to.be.closeTo(0.00213648985687787, 8);
    expect(
      irr([
        -52722, 9465, 2173, 2672, 8469, 6226, 1847, 948, 5861, 7564, 5910, 5350,
        3235, 9034, 4693, 3989, 3582,
      ])
    ).to.be.closeTo(0.0569940174443098, 8);
    expect(
      irr([
        -69371, 6888, 6542, 4754, 6908, 1835, 9994, 8315, 7769, 3622, 7757,
        8010, 3435, 2906, 7541, 8876, 4114,
      ])
    ).to.be.closeTo(0.0462351431706527, 8);
    expect(
      irr([-67898, 4904, 4684, 3136, 9522, 8254, 9868, 6605])
    ).to.be.closeTo(-0.0773606207178078, 8);
    expect(
      irr([
        -62136, 3213, 7263, 3157, 1286, 2631, 7037, 6898, 6767, 4366, 5254,
        8588, 3200, 2609, 4718, 7059, 3571,
      ])
    ).to.be.closeTo(0.0265826345632243, 8);
    expect(
      irr([
        -65809, 2913, 8577, 6668, 7242, 1693, 6663, 6582, 4830, 8159, 9321,
        7175, 9941, 2515, 9770, 2534, 2600,
      ])
    ).to.be.closeTo(0.0502095993414857, 8);
    expect(
      irr([
        -38094, 5497, 3758, 8151, 2787, 9916, 1661, 9996, 8613, 7780, 4486,
        6829, 731, 2053, 1636, 5664, 6930,
      ])
    ).to.be.closeTo(0.125948895372474, 8);
    expect(
      irr([
        -27804, 3515, 3342, 7475, 3319, 8183, 4380, 900, 4095, 7098, 6338, 8613,
        8600, 6886, 6699, 4320, 1235,
      ])
    ).to.be.closeTo(0.163045824699048, 8);
    expect(
      irr([
        -6635, 2094, 1020, 1578, 1177, 9312, 8650, 6620, 2071, 3109, 6645, 7924,
        4443, 6804, 6497, 5331, 1201,
      ])
    ).to.be.closeTo(0.431903898493571, 8);
    expect(
      irr([
        -98206, 535, 9210, 2921, 4684, 6452, 5760, 7159, 4817, 9684, 5565, 3347,
        9225, 2700, 9957, 3346, 8197,
      ])
    ).to.be.closeTo(-0.00530335514327551, 8);
    expect(
      irr([
        -36009, 6626, 8140, 5287, 6675, 8568, 625, 2167, 3002, 2786, 8163, 6989,
        6196, 6960, 5471, 4725, 2458,
      ])
    ).to.be.closeTo(0.136130246314114, 8);
    expect(
      irr([
        -27850, 4628, 6884, 4358, 7763, 581, 7628, 4219, 4417, 780, 6525, 856,
        4735, 1582, 3250, 5596, 6248,
      ])
    ).to.be.closeTo(0.152187754495272, 8);
    expect(
      irr([
        -84119, 2652, 1036, 7355, 3719, 7407, 1624, 8549, 1908, 2347, 5266,
        3494, 5613, 2266, 4972, 4528, 6960,
      ])
    ).to.be.closeTo(-0.0203777182097338, 8);
    expect(
      irr([
        -18347, 9249, 5193, 841, 2495, 8950, 6792, 9605, 8299, 6819, 7175, 6003,
        2229, 1222, 6306, 8205, 8068,
      ])
    ).to.be.closeTo(0.327001292948963, 8);
    expect(
      irr([
        -42509, 8593, 6427, 5677, 4951, 836, 900, 8574, 3809, 9710, 8691, 628,
        8856, 5578, 7219, 9223, 3579,
      ])
    ).to.be.closeTo(0.10967637787915, 8);
    expect(
      irr([-60058, 1939, 6422, 7905, 5663, 3513, 4638, 6517])
    ).to.be.closeTo(-0.107341705415961, 8);
    expect(
      irr([
        -80109, 9076, 752, 4868, 6457, 4670, 3929, 6959, 2068, 727, 9814, 4679,
        2534, 9025, 1438, 8627, 8585,
      ])
    ).to.be.closeTo(0.00563217198693744, 8);
    expect(
      irr([
        -6173, 3381, 9546, 1941, 8849, 7371, 7830, 7555, 6963, 9689, 8033, 1476,
        2640, 8868, 9523, 2111, 8136,
      ])
    ).to.be.closeTo(0.881034877071148, 8);
    expect(
      irr([
        -16129, 3005, 882, 5518, 5660, 8201, 2780, 5614, 2150, 2133, 7424, 841,
        745, 1087, 2113, 9092, 2251,
      ])
    ).to.be.closeTo(0.228052979847972, 8);
    expect(
      irr([
        -21681, 4120, 7462, 6772, 5704, 5228, 7064, 5607, 1401, 8017, 1615,
        6963, 7641, 3853, 2630, 9329, 2017,
      ])
    ).to.be.closeTo(0.253328073900283, 8);
    expect(
      irr([
        -24854, 2842, 4646, 2157, 2714, 9015, 4689, 7863, 3108, 6190, 1380,
        4753, 4515, 9341, 4142, 2347, 3634,
      ])
    ).to.be.closeTo(0.159791841627102, 8);
    expect(
      irr([
        -47412, 7842, 8994, 8133, 3944, 2575, 2391, 9659, 3646, 8732, 6014,
        6783, 9541, 6647, 6374, 5138, 4657,
      ])
    ).to.be.closeTo(0.110344461439964, 8);
    expect(
      irr([
        -3924, 7039, 2247, 6320, 4806, 3028, 3297, 9086, 8430, 8713, 9703, 7966,
        9336, 5397, 2496, 7956, 7186,
      ])
    ).to.be.closeTo(1.43542559759587, 8);
    expect(
      irr([
        -67273, 8980, 1026, 9887, 6602, 2239, 2254, 7011, 8812, 5021, 5028,
        4490, 7985, 8154, 3290, 8021, 9696,
      ])
    ).to.be.closeTo(0.0464599839712778, 8);
    expect(
      irr([
        -2096, 2045, 3835, 631, 5211, 4138, 6493, 4001, 6362, 9846, 8071, 1470,
        7366, 2748, 3986, 1199, 5513,
      ])
    ).to.be.closeTo(1.24184855212715, 8);
    expect(
      irr([
        -85067, 5463, 7346, 1205, 959, 7630, 9901, 8236, 7309, 3648, 8449, 2669,
        7801, 2388, 8665, 835, 6306,
      ])
    ).to.be.closeTo(0.00515999188210503, 8);
    expect(
      irr([
        -41853, 9870, 9889, 4104, 8240, 3718, 3858, 9121, 8106, 2256, 5039,
        9011, 4766, 8768, 7654, 9373, 5864,
      ])
    ).to.be.closeTo(0.15108237365663, 8);
    expect(
      irr([
        -21696, 9576, 9081, 2449, 4228, 9205, 7194, 892, 5351, 7987, 6590, 5047,
        9828, 3996, 924, 1627, 4284,
      ])
    ).to.be.closeTo(0.31012102453652, 8);
    expect(
      irr([
        -88783, 7099, 4850, 6513, 7830, 571, 3129, 9750, 9627, 5837, 4354, 4111,
        856, 4975, 3714, 7777, 8853,
      ])
    ).to.be.closeTo(0.00140872528834857, 8);
    expect(
      irr([
        -98047, 9824, 7016, 5160, 2318, 5816, 3035, 8486, 8702, 9296, 4549,
        5367, 8477, 773, 5128, 6946, 6532,
      ])
    ).to.be.closeTo(-0.00076877564021582, 8);
    expect(
      irr([
        -55060, 7564, 5781, 4781, 8008, 7239, 1698, 2775, 6345, 6411, 6219,
        5890, 7990, 2548, 5175, 2903, 5592,
      ])
    ).to.be.closeTo(0.0634934913913772, 8);
    expect(
      irr([
        -23068, 4103, 8403, 9247, 8910, 9706, 7515, 5995, 7056, 6377, 1315,
        8943, 9419, 5179,
      ])
    ).to.be.closeTo(0.302123890868139, 8);
    expect(
      irr([
        -65825, 4763, 2598, 7526, 8735, 5234, 5784, 2214, 7935, 2840, 7708,
        8672, 2428, 1630, 1033, 2015, 9009,
      ])
    ).to.be.closeTo(0.0255547586563043, 8);
    expect(
      irr([
        -18799, 8662, 1071, 6957, 2265, 801, 9871, 6625, 9716, 5664, 1781, 1469,
        3629, 5763, 2824, 9002, 3562,
      ])
    ).to.be.closeTo(0.27073675304728, 8);
    expect(
      irr([
        -76095, 1871, 3571, 7747, 6811, 6558, 9088, 7459, 1353, 8503, 3875,
        6858, 681, 3099, 926, 5775, 8889,
      ])
    ).to.be.closeTo(0.01073075240248, 8);
    expect(
      irr([
        -96159, 5759, 1622, 4159, 8965, 5479, 1861, 9024, 911, 3575, 6660, 7121,
        8641, 7460, 998, 9963, 4228,
      ])
    ).to.be.closeTo(-0.0116705529293796, 8);
    expect(
      irr([
        -20513, 3546, 8579, 610, 9796, 6738, 9698, 5443, 6292, 8036, 5108, 7972,
        6081, 8371, 6213, 2066, 6479,
      ])
    ).to.be.closeTo(0.283942054735878, 8);
    expect(
      irr([
        -70134, 6839, 8131, 9110, 3057, 7444, 6139, 521, 9782, 4116, 3310, 6870,
        2502, 2697, 2390, 5468, 5792,
      ])
    ).to.be.closeTo(0.0253100423097223, 8);
    expect(
      irr([
        -18123, 1844, 5720, 4737, 8190, 9899, 3309, 3198, 2351, 5156, 3747,
        1492, 9347, 7057, 4876, 9579, 2896,
      ])
    ).to.be.closeTo(0.262008244320459, 8);
    expect(
      irr([
        -95624, 3041, 4440, 2518, 2552, 8936, 2801, 5207, 3743, 8439, 1744,
        4130, 8839, 3991, 3576, 1364, 4465,
      ])
    ).to.be.closeTo(-0.0349062093945272, 8);
    expect(
      irr([
        -47852, 7564, 2095, 1572, 1226, 2915, 6339, 3688, 8783, 642, 6183, 1459,
        6753, 9584, 981, 7930, 5393,
      ])
    ).to.be.closeTo(0.0496907321208067, 8);
    expect(
      irr([
        -95034, 4823, 6258, 9788, 4413, 3718, 2914, 5217, 3112, 3674, 9034,
        9297, 8179, 7769, 8890, 6086, 2899,
      ])
    ).to.be.closeTo(0.0012309241130084, 8);
    expect(
      irr([
        -97835, 6923, 3966, 5006, 3769, 820, 8299, 6075, 2839, 1912, 546, 5367,
        1463, 3692, 6984, 5109, 8724,
      ])
    ).to.be.closeTo(-0.0335249795737448, 8);
    expect(
      irr([
        -55988, 8280, 7571, 1406, 627, 738, 6666, 7165, 6380, 3107, 6560, 9768,
        2251, 8321, 1667, 7130, 5638,
      ])
    ).to.be.closeTo(0.0493159870027737, 8);
    expect(
      irr([
        -22048, 3063, 6059, 3999, 5384, 9125, 7039, 6983, 5880, 7290, 8676,
        2197, 5858, 6338, 6240, 5960, 2786,
      ])
    ).to.be.closeTo(0.241291296308497, 8);
    expect(
      irr([
        -47329, 2606, 9050, 7245, 7997, 9596, 2555, 8437, 8644, 8079, 3834,
        3905, 2142, 3013, 6066, 6693, 7150,
      ])
    ).to.be.closeTo(0.106512692729435, 8);
    expect(
      irr([
        -51351, 6539, 4979, 6481, 8665, 2388, 5746, 5742, 9887, 9308, 9418,
        5137, 9879, 8026, 2799, 7970, 1610,
      ])
    ).to.be.closeTo(0.0988073932802267, 8);
    expect(
      irr([
        -83076, 9552, 4983, 3266, 1035, 2082, 4965, 7024, 5124, 2340, 5526,
        6545, 546, 1451, 6456, 704, 4168,
      ])
    ).to.be.closeTo(-0.0287707599827218, 8);
    expect(
      irr([
        -44006, 9811, 1643, 5465, 6201, 9958, 5974, 6080, 5710, 3214, 5896,
        2925, 934, 2575, 1908, 6392, 9321,
      ])
    ).to.be.closeTo(0.0987976549400171, 8);
    expect(
      irr([
        -32788, 5666, 2866, 2445, 7153, 7098, 9295, 3070, 5949, 4830, 3418,
        3149, 5402, 1141, 7812, 3706, 1516,
      ])
    ).to.be.closeTo(0.12731031388219, 8);
    expect(
      irr([
        -95353, 3721, 9109, 6578, 1243, 5625, 7659, 7382, 1222, 7725, 8620,
        3472, 5979, 2654, 5382, 1158, 2021,
      ])
    ).to.be.closeTo(-0.02285406225079, 8);
    expect(
      irr([
        -95165, 1571, 3015, 2861, 9300, 3665, 7693, 3947, 7412, 6337, 3119,
        2204, 1805, 7872, 6229, 3234, 5524,
      ])
    ).to.be.closeTo(-0.0249308027939343, 8);
    expect(
      irr([
        -81292, 3438, 9000, 6189, 8003, 6850, 6278, 4613, 9170, 6369, 7058,
        9868, 546, 6743, 4509, 3481, 6779,
      ])
    ).to.be.closeTo(0.0251545419012544, 8);
    expect(
      irr([
        -74148, 7729, 9471, 7032, 9388, 1974, 4624, 3531, -7556, 8963, 4039,
        7658, 9455, 6329, 5379, 6585, 4527,
      ])
    ).to.be.closeTo(0.0234271508477322, 8);
    expect(
      irr([
        -92328, 9942, 2444, 9419, 4837, 4297, 8774, 4484, 8136, 6935, 8226,
        3513, 3274, 5480, 4246, 5381, 5455,
      ])
    ).to.be.closeTo(0.00340008273146353, 8);
    expect(
      irr([
        -75106, 2867, 6661, 3804, 5530, 8634, 7384, 5731, 8793, 7655, 5995,
        5054, 7156, 1639, 8654, 5484, 648,
      ])
    ).to.be.closeTo(0.0252310720322964, 8);
    expect(
      irr([
        -14493, 5653, 4270, 5141, 2930, 6950, 1055, 8686, 9349, 630, 2415, 8864,
        6815, 4528, 3915, 6020, 7607,
      ])
    ).to.be.closeTo(0.340053579999745, 8);
    expect(
      irr([
        -21588, 5948, 1441, 4076, 3412, 9044, 4098, 6480, 7627, 6629, 7260,
        8531, 5866, 3957, 7367, 3485, 5830,
      ])
    ).to.be.closeTo(0.225801748054267, 8);
    expect(
      irr([
        -88874, 5390, 8613, 3944, 7857, 1728, 5162, 7709, 7850, 581, 557, 8227,
        8470, 2256, 9999, 5407, 1624,
      ])
    ).to.be.closeTo(-0.00484646237667674, 8);
    expect(
      irr([
        -44628, 3863, 3730, 5633, 9389, 2183, 7707, 5635, 8654, 9409, 9803,
        3370, 3952, 3179, 7513, 6196, 6620,
      ])
    ).to.be.closeTo(0.104489206073922, 8);
    expect(
      irr([
        -17301, 5722, 6818, 6309, 2147, 2836, 2277, 5838, 9397, 4516, 9216,
        9553, 3579, 4989, 9820, 7425, 4802,
      ])
    ).to.be.closeTo(0.308863146424214, 8);
    expect(
      irr([
        -8525, 2095, 9123, 7326, 4812, 4792, 8416, 6654, 3797, -7929, 5158,
        1769, 2388, 5514, 8758, 8191, 6435,
      ])
    ).to.be.closeTo(0.609955956156352, 8);
    expect(
      irr([
        -24263, 1027, 5305, 2753, 4279, 7544, 4189, 8993, 2255, 6744, 1079,
        9608, 8415, 3662, 615, 7689, 6737,
      ])
    ).to.be.closeTo(0.169078586855392, 8);
    expect(
      irr([
        -96685, 1875, 1291, 628, 5072, 1025, 1102, 1697, 4480, 8826, 4472, 8960,
        3293, 2510, 1669, 7238, 3418,
      ])
    ).to.be.closeTo(-0.0493497279298704, 8);
    expect(
      irr([
        -92626, 6227, 602, 6359, 8124, 695, 4672, 1997, 1263, 2255, 2978, 8085,
        5485, 6919, 984, 3684, 2741,
      ])
    ).to.be.closeTo(-0.0429469886417285, 8);
    expect(
      irr([
        -13566, 9244, 1635, 1461, 5606, 9475, 5681, 1910, 8082, 9628, 7640,
        -8940, 3230, 4477, 880, 3727, 4763,
      ])
    ).to.be.closeTo(0.392813177962573, 8);
    expect(
      irr([
        -32503, 4931, 3747, 8582, 2011, 590, 7842, 5244, 9025, 8701, 8438, 1575,
        1737, 4377, 2548, 9879, 4139,
      ])
    ).to.be.closeTo(0.137741017391808, 8);
    expect(
      irr([
        -99527, 6181, 3492, 3737, 616, 3100, 5286, 9831, 9122, 5941, 4167, 5441,
        1480, 9285, 2534, 5205, 6115,
      ])
    ).to.be.closeTo(-0.0217841182893732, 8);
    expect(
      irr([
        -16750, 6650, 6568, 1235, 2570, 4399, 2256, 8048, 9657, 3550, 7914,
        8798, -3760, 4433, 6288, 6484, 5936,
      ])
    ).to.be.closeTo(0.292054814798284, 8);
  });

  it("throws an error on invalid guesses", () => {
    expect(() =>
      irr(
        [
          -16750, 6650, 6568, 1235, 2570, 4399, 2256, 8048, 9657, 3550, 7914,
          8798, -3760, 4433, 6288, 6484, 5936,
        ],
        -2
      )
    ).to.throw("Invalid guess");
  });

  it("throws an error on invalid values", () => {
    expect(() => irr([16750, 6650, 6568, 1235])).to.throw("Invalid values");
    expect(() => irr([-16750, -6650, -6568, -1235])).to.throw("Invalid values");
  });
});
